# GitHub Actions workflow for releasing to PyPI on semver tags
name: Release
on:
  push:
    tags:
      - "*"
jobs:
  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Check tag is valid semver
        id: semver_check
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          SEMVER_REGEX='^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
          VERSION="${TAG_NAME#v}"
          if [[ "$VERSION" =~ $SEMVER_REGEX ]]; then
            echo "::set-output name=semver::true"
          else
            echo "::set-output name=semver::false"
          fi
      - name: Install dependencies
        run: poetry install --no-interaction --only main
      - name: Update version in pyproject.toml
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          VERSION="${TAG_NAME#v}"
          if [[ "${{ steps.semver_check.outputs.semver }}" == "true" ]]; then
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          else
            # For non-semver tags, use 0.1.0-dev-YYYYMMDD+<git-commit>
            BASE_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = \"\(.*\)\"/\1/')
            GIT_COMMIT=$(git rev-parse --short HEAD)
            DATE=$(date +%Y%m%d)
            sed -i "s/^version = \".*\"/version = \"$BASE_VERSION-dev-$DATE+$GIT_COMMIT\"/" pyproject.toml
          fi
      - name: Build package
        run: poetry build
      - name: Publish to PyPI using Trusted Publisher
        if: steps.semver_check.outputs.semver == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Publish to TestPyPI using Trusted Publisher
        if: steps.semver_check.outputs.semver != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
      - name: Check for unreleased changes in CHANGELOG.md
        if: steps.semver_check.outputs.semver == 'true'
        id: changelog_check
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          VERSION="${TAG_NAME#v}"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout main
          git pull origin main
          git add pyproject.toml

          if grep -q "^## \[Unreleased\]" CHANGELOG.md; then
            # Move Unreleased section to new version
            awk -v ver="$VERSION" -v date="$(date +%Y-%m-%d)" '
              BEGIN { unreleased=0 }
              /^## \[Unreleased\]/ { print "## [" ver "] - " date; unreleased=1; next }
              /^## \[/ && unreleased { unreleased=0 }
              { print }
            ' CHANGELOG.md > CHANGELOG.md.new && mv CHANGELOG.md.new CHANGELOG.md
            git add CHANGELOG.md
          fi

          git commit -m "Update files for version $VERSION" || echo "No changes to commit"
          git push origin main
      - name: Get release notes from changelog
        if: steps.semver_check.outputs.semver == 'true'
        id: changelog_body
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          VERSION="${TAG_NAME#v}"
          awk -v ver="$VERSION" '/^## \[" ver "\]/ {flag=1; next} /^## \[/ && flag {flag=0} flag' CHANGELOG.md > release_body.txt
      - name: Create Release
        if: steps.semver_check.outputs.semver == 'true'
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_body.txt
